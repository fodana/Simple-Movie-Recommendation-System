{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1Bz7WNPgVonJPS4PkKyaba5UnGDKDYc3d","authorship_tag":"ABX9TyNNBXj6VB4ato2+jrmFDZzp"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"u1nPzvazDTqi"},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import ast\n","\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.metrics.pairwise import cosine_similarity\n","\n","import nltk\n","from nltk.stem.porter import PorterStemmer"]},{"cell_type":"code","source":["credits_df = pd.read_csv(\"/content/drive/MyDrive/Data/Movie Recommendation System/credits.csv\")\n","movies_df = pd.read_csv(\"/content/drive/MyDrive/Data/Movie Recommendation System/movies.csv\")"],"metadata":{"id":"ZaZOsIlsCrAA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["credits_df.info()\n","movies_df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gLCq6hjUHwlm","executionInfo":{"status":"ok","timestamp":1724078861356,"user_tz":240,"elapsed":8,"user":{"displayName":"Dana Foual","userId":"17544494199980292994"}},"outputId":"5856d601-fdd2-43d3-c5f0-e883f824bdb8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 4803 entries, 0 to 4802\n","Data columns (total 4 columns):\n"," #   Column    Non-Null Count  Dtype \n","---  ------    --------------  ----- \n"," 0   movie_id  4803 non-null   int64 \n"," 1   title     4803 non-null   object\n"," 2   cast      4803 non-null   object\n"," 3   crew      4803 non-null   object\n","dtypes: int64(1), object(3)\n","memory usage: 150.2+ KB\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 4803 entries, 0 to 4802\n","Data columns (total 20 columns):\n"," #   Column                Non-Null Count  Dtype  \n","---  ------                --------------  -----  \n"," 0   budget                4803 non-null   int64  \n"," 1   genres                4803 non-null   object \n"," 2   homepage              1712 non-null   object \n"," 3   id                    4803 non-null   int64  \n"," 4   keywords              4803 non-null   object \n"," 5   original_language     4803 non-null   object \n"," 6   original_title        4803 non-null   object \n"," 7   overview              4800 non-null   object \n"," 8   popularity            4803 non-null   float64\n"," 9   production_companies  4803 non-null   object \n"," 10  production_countries  4803 non-null   object \n"," 11  release_date          4802 non-null   object \n"," 12  revenue               4803 non-null   int64  \n"," 13  runtime               4801 non-null   float64\n"," 14  spoken_languages      4803 non-null   object \n"," 15  status                4803 non-null   object \n"," 16  tagline               3959 non-null   object \n"," 17  title                 4803 non-null   object \n"," 18  vote_average          4803 non-null   float64\n"," 19  vote_count            4803 non-null   int64  \n","dtypes: float64(3), int64(4), object(13)\n","memory usage: 750.6+ KB\n"]}]},{"cell_type":"code","source":["# merge datasets\n","movies = movies_df.merge(credits_df, on='title')\n","\n","movies.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VPB6sNdRFN-y","executionInfo":{"status":"ok","timestamp":1724078861357,"user_tz":240,"elapsed":8,"user":{"displayName":"Dana Foual","userId":"17544494199980292994"}},"outputId":"cb74d66d-7654-4dd3-d1c6-e2a3f0fc3238"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4808, 23)"]},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":["# select specific columns to work with\n","movies = movies[['movie_id', 'title', 'overview', 'genres', 'keywords', 'cast', 'crew']]"],"metadata":{"id":"AJFBVZ7wGOrf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# drops missing values\n","movies.dropna(inplace=True)\n","\n","# number of missing values\n","movies.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R6AKSWpnIOBF","executionInfo":{"status":"ok","timestamp":1724078861357,"user_tz":240,"elapsed":6,"user":{"displayName":"Dana Foual","userId":"17544494199980292994"}},"outputId":"9099ce71-2540-49e7-95de-577bcb748d1e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-39-f70aabefb9aa>:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  movies.dropna(inplace=True)\n"]},{"output_type":"execute_result","data":{"text/plain":["movie_id    0\n","title       0\n","overview    0\n","genres      0\n","keywords    0\n","cast        0\n","crew        0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>movie_id</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>title</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>overview</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>genres</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>keywords</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>cast</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>crew</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":39}]},{"cell_type":"code","source":["# number of duplicated values\n","movies.duplicated().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U6cnxWAHI6az","executionInfo":{"status":"ok","timestamp":1724078861508,"user_tz":240,"elapsed":155,"user":{"displayName":"Dana Foual","userId":"17544494199980292994"}},"outputId":"cf4d567c-a8ed-47e4-e413-da3953810abd"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["# makes df easier to read\n","def convert(obj):\n","  L=[]\n","  for i in ast.literal_eval(obj):\n","    L.append(i['name'])\n","  return L"],"metadata":{"id":"cXIQugtaJPNO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["movies['genres'] = movies['genres'].apply(convert)\n","movies['keywords'] = movies['keywords'].apply(convert)"],"metadata":{"id":"zj5r1Hb9Khrm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def convert3(obj):\n","  L=[]\n","  counter=0\n","  for i in ast.literal_eval(obj):\n","    if counter != 3:\n","      L.append(i['name'])\n","      counter+=1\n","    else:\n","      break\n","    return L"],"metadata":{"id":"3jJEBvxLLE7s"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["movies['cast'] = movies['cast'].apply(convert3)"],"metadata":{"id":"YbAck1BqLcRs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def fetch_director(obj):\n","  L=[]\n","  for i in ast.literal_eval(obj):\n","    if i['job'] == 'Director':\n","      L.append(i['name'])\n","      break\n","  return L"],"metadata":{"id":"iFcIttHSrvaz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["movies['crew'] = movies['crew'].apply(fetch_director)"],"metadata":{"id":"Dh7YMZnasEtu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# seperate overview by (,) to make it easier to recommend movies\n","movies['overview'] = movies['overview'].apply(lambda x:x.split())"],"metadata":{"id":"MyHHzMD80mHx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["movies['genres']=movies['genres'].apply(lambda x:[i.replace(\" \",\" \") for i in x])\n","movies['keywords']=movies['keywords'].apply(lambda x:[i.replace(\" \",\" \") for i in x])"],"metadata":{"id":"LuFrOvLS1H74"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["movies.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"S8J8e3d85x4i","executionInfo":{"status":"ok","timestamp":1724078872203,"user_tz":240,"elapsed":149,"user":{"displayName":"Dana Foual","userId":"17544494199980292994"}},"outputId":"e02b8e7a-d1fa-47dc-9d04-757ec24ad0a7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   movie_id                                     title  \\\n","0     19995                                    Avatar   \n","1       285  Pirates of the Caribbean: At World's End   \n","2    206647                                   Spectre   \n","3     49026                     The Dark Knight Rises   \n","4     49529                               John Carter   \n","\n","                                            overview  \\\n","0  [In, the, 22nd, century,, a, paraplegic, Marin...   \n","1  [Captain, Barbossa,, long, believed, to, be, d...   \n","2  [A, cryptic, message, from, Bondâ€™s, past, send...   \n","3  [Following, the, death, of, District, Attorney...   \n","4  [John, Carter, is, a, war-weary,, former, mili...   \n","\n","                                          genres  \\\n","0  [Action, Adventure, Fantasy, Science Fiction]   \n","1                   [Adventure, Fantasy, Action]   \n","2                     [Action, Adventure, Crime]   \n","3               [Action, Crime, Drama, Thriller]   \n","4           [Action, Adventure, Science Fiction]   \n","\n","                                            keywords               cast  \\\n","0  [culture clash, future, space war, space colon...  [Sam Worthington]   \n","1  [ocean, drug abuse, exotic island, east india ...      [Johnny Depp]   \n","2  [spy, based on novel, secret agent, sequel, mi...     [Daniel Craig]   \n","3  [dc comics, crime fighter, terrorist, secret i...   [Christian Bale]   \n","4  [based on novel, mars, medallion, space travel...    [Taylor Kitsch]   \n","\n","                  crew  \n","0      [James Cameron]  \n","1     [Gore Verbinski]  \n","2         [Sam Mendes]  \n","3  [Christopher Nolan]  \n","4     [Andrew Stanton]  "],"text/html":["\n","  <div id=\"df-d2773df7-ebaf-42fc-9afb-cd4523c2151b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>movie_id</th>\n","      <th>title</th>\n","      <th>overview</th>\n","      <th>genres</th>\n","      <th>keywords</th>\n","      <th>cast</th>\n","      <th>crew</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>19995</td>\n","      <td>Avatar</td>\n","      <td>[In, the, 22nd, century,, a, paraplegic, Marin...</td>\n","      <td>[Action, Adventure, Fantasy, Science Fiction]</td>\n","      <td>[culture clash, future, space war, space colon...</td>\n","      <td>[Sam Worthington]</td>\n","      <td>[James Cameron]</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>285</td>\n","      <td>Pirates of the Caribbean: At World's End</td>\n","      <td>[Captain, Barbossa,, long, believed, to, be, d...</td>\n","      <td>[Adventure, Fantasy, Action]</td>\n","      <td>[ocean, drug abuse, exotic island, east india ...</td>\n","      <td>[Johnny Depp]</td>\n","      <td>[Gore Verbinski]</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>206647</td>\n","      <td>Spectre</td>\n","      <td>[A, cryptic, message, from, Bondâ€™s, past, send...</td>\n","      <td>[Action, Adventure, Crime]</td>\n","      <td>[spy, based on novel, secret agent, sequel, mi...</td>\n","      <td>[Daniel Craig]</td>\n","      <td>[Sam Mendes]</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>49026</td>\n","      <td>The Dark Knight Rises</td>\n","      <td>[Following, the, death, of, District, Attorney...</td>\n","      <td>[Action, Crime, Drama, Thriller]</td>\n","      <td>[dc comics, crime fighter, terrorist, secret i...</td>\n","      <td>[Christian Bale]</td>\n","      <td>[Christopher Nolan]</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>49529</td>\n","      <td>John Carter</td>\n","      <td>[John, Carter, is, a, war-weary,, former, mili...</td>\n","      <td>[Action, Adventure, Science Fiction]</td>\n","      <td>[based on novel, mars, medallion, space travel...</td>\n","      <td>[Taylor Kitsch]</td>\n","      <td>[Andrew Stanton]</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d2773df7-ebaf-42fc-9afb-cd4523c2151b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d2773df7-ebaf-42fc-9afb-cd4523c2151b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d2773df7-ebaf-42fc-9afb-cd4523c2151b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7b2d7c9a-97a8-450d-9778-12ce2bcecb1c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7b2d7c9a-97a8-450d-9778-12ce2bcecb1c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7b2d7c9a-97a8-450d-9778-12ce2bcecb1c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"movies","summary":"{\n  \"name\": \"movies\",\n  \"rows\": 4805,\n  \"fields\": [\n    {\n      \"column\": \"movie_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 88318,\n        \"min\": 5,\n        \"max\": 447027,\n        \"num_unique_values\": 4799,\n        \"samples\": [\n          352978,\n          76649,\n          40494\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4796,\n        \"samples\": [\n          \"Two Brothers\",\n          \"From Paris with Love\",\n          \"Walk the Line\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"overview\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"genres\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"keywords\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cast\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"crew\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":49}]},{"cell_type":"code","source":["# add all words to tags\n","movies['tags'] = movies['overview']+movies['genres']+movies['keywords']+movies['cast']+movies['crew']"],"metadata":{"id":"cG4DT9RM55TI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["new_df = movies[['movie_id','title','tags']]"],"metadata":{"id":"NsMP5pX37RFA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# remove brackets\n","new_df['tags'] = new_df['tags'].apply(lambda x:' '.join(x) if isinstance(x, (list, tuple)) else str(x))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6FH381In7c-h","executionInfo":{"status":"ok","timestamp":1724078872489,"user_tz":240,"elapsed":9,"user":{"displayName":"Dana Foual","userId":"17544494199980292994"}},"outputId":"dec45eb7-d784-40a8-9ae1-6a7f7b8f8ff5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-52-6437ff4a0537>:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  new_df['tags'] = new_df['tags'].apply(lambda x:' '.join(x) if isinstance(x, (list, tuple)) else str(x))\n"]}]},{"cell_type":"code","source":["#lowercase for better prediction\n","new_df['tags'] = new_df['tags'].apply(lambda x:x.lower())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-76EFsIMFfYY","executionInfo":{"status":"ok","timestamp":1724078872489,"user_tz":240,"elapsed":6,"user":{"displayName":"Dana Foual","userId":"17544494199980292994"}},"outputId":"03321442-47e3-4381-8228-728ebf98c92b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-53-b8beaec0a871>:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  new_df['tags'] = new_df['tags'].apply(lambda x:x.lower())\n"]}]},{"cell_type":"code","source":["# feature extraction\n","# transforms text into a vector based on frequency count\n","cv = CountVectorizer(max_features=5000, stop_words='english')\n","cv.fit_transform(new_df['tags']).toarray().shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9MsJZAo4Fr9j","executionInfo":{"status":"ok","timestamp":1724078873090,"user_tz":240,"elapsed":604,"user":{"displayName":"Dana Foual","userId":"17544494199980292994"}},"outputId":"552018a6-16fb-4975-8d2d-9fd325ead4ff"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4805, 5000)"]},"metadata":{},"execution_count":54}]},{"cell_type":"code","source":["vectors = cv.fit_transform(new_df['tags']).toarray()"],"metadata":{"id":"0HNcqKdvGdZJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["len(cv.get_feature_names_out())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZO2m97g7GrCD","executionInfo":{"status":"ok","timestamp":1724078873676,"user_tz":240,"elapsed":8,"user":{"displayName":"Dana Foual","userId":"17544494199980292994"}},"outputId":"1762f363-f432-487a-a827-2f3be1b786aa"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5000"]},"metadata":{},"execution_count":56}]},{"cell_type":"code","source":["# stemming\n","# reducing words to their root or base form\n","ps = PorterStemmer()"],"metadata":{"id":"Y1s6sGnhHICt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def stem(text):\n","  y=[]\n","  for i in text.split():\n","    y.append(ps.stem(i))\n","  return \" \".join(y)"],"metadata":{"id":"EkFvrYGdHL1P"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["new_df['tags'] = new_df['tags'].apply(stem)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_Pk3QFQDHXwr","executionInfo":{"status":"ok","timestamp":1724078880926,"user_tz":240,"elapsed":7254,"user":{"displayName":"Dana Foual","userId":"17544494199980292994"}},"outputId":"0544c42d-9316-4e79-b22d-6e620205368a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-59-be18a4346d89>:1: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  new_df['tags'] = new_df['tags'].apply(stem)\n"]}]},{"cell_type":"code","source":["# cosine similarity\n","# used to measure document similarity in text analysis\n","cosine_similarity(vectors)\n","cosine_similarity(vectors).shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xTTx25toHlB9","executionInfo":{"status":"ok","timestamp":1724078856357,"user_tz":240,"elapsed":10649,"user":{"displayName":"Dana Foual","userId":"17544494199980292994"}},"outputId":"61436eb4-e179-400a-a31c-09ce53ef4d6b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4805, 4805)"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["similarity = cosine_similarity(vectors)"],"metadata":{"id":"-6RqREx-H8aD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# converts to enumerate that contains counter as key\n","# makes items in object easier to access\n","sorted(list(enumerate(similarity[0])), reverse=True, key=lambda x:x[1])[1:6]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"g2BbEToxIBvj","executionInfo":{"status":"ok","timestamp":1724078860395,"user_tz":240,"elapsed":20,"user":{"displayName":"Dana Foual","userId":"17544494199980292994"}},"outputId":"87675be9-e80e-41ad-9c77-d0913ed330db"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(2409, 0.46423834544262965),\n"," (1537, 0.42473462376432153),\n"," (373, 0.40994579587496144),\n"," (4335, 0.4092937423432804),\n"," (3162, 0.40849122311878305)]"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["def recommend(movie):\n","  movie_index = new_df[new_df['title']==movie].index[0]\n","  distances = similarity[movie_index]\n","  movies_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x:x[1])[1:6]\n","\n","  for i in movies_list:\n","    print(new_df.iloc[i[0]].title)"],"metadata":{"id":"n6rMzCkAIai3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["recommend('Avatar')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HPQLniehJWX-","executionInfo":{"status":"ok","timestamp":1724078860395,"user_tz":240,"elapsed":16,"user":{"displayName":"Dana Foual","userId":"17544494199980292994"}},"outputId":"1498a6e3-e5d5-44dd-cb9e-ff8fe5489523"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Aliens\n","Moonraker\n","Mission to Mars\n","Silent Running\n","Alien\n"]}]},{"cell_type":"code","source":["recommend(\"Iron Man\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SpHCsigzJiCq","executionInfo":{"status":"ok","timestamp":1724078860396,"user_tz":240,"elapsed":15,"user":{"displayName":"Dana Foual","userId":"17544494199980292994"}},"outputId":"029f8c73-04ef-4c8e-b108-ad91a74d12a0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Iron Man 2\n","Iron Man 3\n","Avengers: Age of Ultron\n","The Avengers\n","Captain America: Civil War\n"]}]}]}